const GLchar* fractalFragmentShader = R"END(
#version 450 core
#extension GL_ARB_gpu_shader_fp64 : enable
#pragma optionNV(fastmath off)
#pragma optionNV(fastprecision off)

out vec4 FragColor;

uniform vec2	iResolution;
uniform float	iScale;
uniform vec2	iPosition;
uniform float	iThreshold;
uniform int		iMaxIter;
uniform bool	iColor;

const int PALETTE_SIZE = 256;
const int PALETTE[PALETTE_SIZE][3] = {
	{0xB4, 0x9C, 0x70}, {0xB9, 0xA0, 0x73}, {0xBE, 0xA4, 0x76}, {0xC3, 0xA8, 0x79},
	{0xC8, 0xAC, 0x7C}, {0xCD, 0xB1, 0x7F}, {0xD2, 0xB6, 0x82}, {0xD7, 0xBB, 0x85},
	{0xDC, 0xC0, 0x88}, {0xE0, 0xC1, 0x88}, {0xE4, 0xC2, 0x88}, {0xE8, 0xC3, 0x88},
	{0xEC, 0xC4, 0x88}, {0xEB, 0xC0, 0x85}, {0xEA, 0xBC, 0x82}, {0xE9, 0xB8, 0x7F},
	{0xE8, 0xB4, 0x7C}, {0xE7, 0xB1, 0x7A}, {0xE6, 0xAE, 0x78}, {0xE5, 0xAB, 0x76},
	{0xE4, 0xA8, 0x74}, {0xE3, 0xA4, 0x72}, {0xE2, 0xA0, 0x70}, {0xE1, 0x9C, 0x6E},
	{0xE0, 0x98, 0x6C}, {0xDF, 0x95, 0x6A}, {0xDE, 0x92, 0x68}, {0xDD, 0x8F, 0x66},
	{0xDC, 0x8C, 0x64}, {0xDB, 0x89, 0x62}, {0xDA, 0x86, 0x60}, {0xD9, 0x83, 0x5E},
	{0xD8, 0x80, 0x5C}, {0xD7, 0x7C, 0x5A}, {0xD6, 0x78, 0x58}, {0xD5, 0x74, 0x56},
	{0xD4, 0x70, 0x54}, {0xD1, 0x6E, 0x52}, {0xCE, 0x6C, 0x50}, {0xCB, 0x6A, 0x4E},
	{0xC8, 0x68, 0x4C}, {0xC6, 0x66, 0x4B}, {0xC4, 0x64, 0x4A}, {0xC2, 0x62, 0x49},
	{0xC0, 0x60, 0x48}, {0xBD, 0x5F, 0x48}, {0xBA, 0x5E, 0x48}, {0xB7, 0x5D, 0x48},
	{0xB4, 0x5C, 0x48}, {0xB1, 0x5B, 0x47}, {0xAE, 0x5A, 0x46}, {0xAB, 0x59, 0x45},
	{0xA8, 0x58, 0x44}, {0xA5, 0x56, 0x43}, {0xA2, 0x54, 0x42}, {0x9F, 0x52, 0x41},
	{0x9C, 0x50, 0x40}, {0x9A, 0x4F, 0x40}, {0x98, 0x4E, 0x40}, {0x96, 0x4D, 0x40},
	{0x94, 0x4C, 0x40}, {0x91, 0x4B, 0x3F}, {0x8E, 0x4A, 0x3E}, {0x8B, 0x49, 0x3D},
	{0x88, 0x48, 0x3C}, {0x84, 0x46, 0x3B}, {0x80, 0x44, 0x3A}, {0x7C, 0x42, 0x39},
	{0x78, 0x40, 0x38}, {0x73, 0x3D, 0x36}, {0x6E, 0x3A, 0x34}, {0x69, 0x37, 0x32},
	{0x64, 0x34, 0x30}, {0x5E, 0x32, 0x2E}, {0x58, 0x30, 0x2C}, {0x52, 0x2E, 0x2A},
	{0x4C, 0x2C, 0x28}, {0x47, 0x29, 0x26}, {0x42, 0x26, 0x24}, {0x3D, 0x23, 0x22},
	{0x38, 0x20, 0x20}, {0x32, 0x1E, 0x1E}, {0x2C, 0x1C, 0x1C}, {0x26, 0x1A, 0x1A},
	{0x20, 0x18, 0x18}, {0x20, 0x19, 0x19}, {0x20, 0x1A, 0x1A}, {0x20, 0x1B, 0x1B},
	{0x20, 0x1C, 0x1C}, {0x24, 0x20, 0x1F}, {0x28, 0x24, 0x22}, {0x2C, 0x28, 0x25},
	{0x30, 0x2C, 0x28}, {0x35, 0x30, 0x2B}, {0x3A, 0x34, 0x2E}, {0x3F, 0x38, 0x31},
	{0x44, 0x3C, 0x34}, {0x47, 0x3F, 0x36}, {0x4A, 0x42, 0x38}, {0x4D, 0x45, 0x3A},
	{0x50, 0x48, 0x3C}, {0x50, 0x4A, 0x3D}, {0x50, 0x4C, 0x3E}, {0x50, 0x4E, 0x3F},
	{0x50, 0x50, 0x40}, {0x50, 0x54, 0x43}, {0x50, 0x58, 0x46}, {0x50, 0x5C, 0x49},
	{0x50, 0x60, 0x4C}, {0x4C, 0x64, 0x50}, {0x48, 0x68, 0x54}, {0x44, 0x6C, 0x58},
	{0x40, 0x70, 0x5C}, {0x3F, 0x74, 0x5E}, {0x3E, 0x78, 0x60}, {0x3D, 0x7C, 0x62},
	{0x3C, 0x80, 0x64}, {0x43, 0x83, 0x61}, {0x4A, 0x86, 0x5E}, {0x51, 0x89, 0x5B},
	{0x58, 0x8C, 0x58}, {0x5F, 0x90, 0x55}, {0x66, 0x94, 0x52}, {0x6D, 0x98, 0x4F},
	{0x74, 0x9C, 0x4C}, {0x80, 0xA0, 0x4A}, {0x8C, 0xA4, 0x48}, {0x98, 0xA8, 0x46},
	{0xA4, 0xAC, 0x44}, {0xB2, 0xB0, 0x43}, {0xC0, 0xB4, 0x42}, {0xCE, 0xB8, 0x41},
	{0xDC, 0xBC, 0x40}, {0xE3, 0xC0, 0x44}, {0xEA, 0xC4, 0x48}, {0xF1, 0xC8, 0x4C},
	{0xF8, 0xCC, 0x50}, {0xF7, 0xCB, 0x54}, {0xF6, 0xCA, 0x58}, {0xF5, 0xC9, 0x5C},
	{0xF4, 0xC8, 0x60}, {0xF4, 0xC3, 0x5D}, {0xF4, 0xBE, 0x5A}, {0xF4, 0xB9, 0x57},
	{0xF4, 0xB4, 0x54}, {0xF1, 0xB0, 0x52}, {0xEE, 0xAC, 0x50}, {0xEB, 0xA8, 0x4E},
	{0xE8, 0xA4, 0x4C}, {0xE6, 0xA0, 0x4B}, {0xE4, 0x9C, 0x4A}, {0xE2, 0x98, 0x49},
	{0xE0, 0x94, 0x48}, {0xDE, 0x90, 0x46}, {0xDC, 0x8C, 0x44}, {0xDA, 0x88, 0x42},
	{0xD8, 0x84, 0x40}, {0xD6, 0x80, 0x3F}, {0xD4, 0x7C, 0x3E}, {0xD2, 0x78, 0x3D},
	{0xD0, 0x74, 0x3C}, {0xCD, 0x70, 0x3A}, {0xCA, 0x6C, 0x38}, {0xC7, 0x68, 0x36},
	{0xC4, 0x64, 0x34}, {0xC2, 0x60, 0x33}, {0xC0, 0x5C, 0x32}, {0xBE, 0x58, 0x31},
	{0xBC, 0x54, 0x30}, {0xBA, 0x50, 0x2F}, {0xB8, 0x4C, 0x2E}, {0xB6, 0x48, 0x2D},
	{0xB4, 0x44, 0x2C}, {0xB2, 0x40, 0x2A}, {0xB0, 0x3C, 0x28}, {0xAE, 0x38, 0x26},
	{0xAC, 0x34, 0x24}, {0xA6, 0x32, 0x25}, {0xA0, 0x30, 0x26}, {0x9A, 0x2E, 0x27},
	{0x94, 0x2C, 0x28}, {0x8E, 0x2A, 0x2A}, {0x88, 0x28, 0x2C}, {0x82, 0x26, 0x2E},
	{0x7C, 0x24, 0x30}, {0x77, 0x24, 0x31}, {0x72, 0x24, 0x32}, {0x6D, 0x24, 0x33},
	{0x68, 0x24, 0x34}, {0x65, 0x23, 0x33}, {0x62, 0x22, 0x32}, {0x5F, 0x21, 0x31},
	{0x5C, 0x20, 0x30}, {0x58, 0x20, 0x2E}, {0x54, 0x20, 0x2C}, {0x50, 0x20, 0x2A},
	{0x4C, 0x20, 0x28}, {0x49, 0x1F, 0x27}, {0x46, 0x1E, 0x26}, {0x43, 0x1D, 0x25},
	{0x40, 0x1C, 0x24}, {0x3D, 0x1C, 0x23}, {0x3A, 0x1C, 0x22}, {0x37, 0x1C, 0x21},
	{0x34, 0x1C, 0x20}, {0x31, 0x1C, 0x1F}, {0x2E, 0x1C, 0x1E}, {0x2B, 0x1C, 0x1D},
	{0x28, 0x1C, 0x1C}, {0x29, 0x1C, 0x1B}, {0x2A, 0x1C, 0x1A}, {0x2B, 0x1C, 0x19},
	{0x2C, 0x1C, 0x18}, {0x2D, 0x1D, 0x19}, {0x2E, 0x1E, 0x1A}, {0x2F, 0x1F, 0x1B},
	{0x30, 0x20, 0x1C}, {0x31, 0x21, 0x1D}, {0x32, 0x22, 0x1E}, {0x33, 0x23, 0x1F},
	{0x34, 0x24, 0x20}, {0x36, 0x27, 0x22}, {0x38, 0x2A, 0x24}, {0x3A, 0x2D, 0x26},
	{0x3C, 0x30, 0x28}, {0x3E, 0x32, 0x2A}, {0x40, 0x34, 0x2C}, {0x42, 0x36, 0x2E},
	{0x44, 0x38, 0x30}, {0x46, 0x3A, 0x32}, {0x48, 0x3C, 0x34}, {0x4A, 0x3E, 0x36},
	{0x4C, 0x40, 0x38}, {0x4E, 0x43, 0x3A}, {0x50, 0x46, 0x3C}, {0x52, 0x49, 0x3E},
	{0x54, 0x4C, 0x40}, {0x56, 0x4E, 0x42}, {0x58, 0x50, 0x44}, {0x5A, 0x52, 0x46},
	{0x5C, 0x54, 0x48}, {0x61, 0x58, 0x4B}, {0x66, 0x5C, 0x4E}, {0x6B, 0x60, 0x51},
	{0x70, 0x64, 0x54}, {0x76, 0x69, 0x57}, {0x7C, 0x6E, 0x5A}, {0x82, 0x73, 0x5D},
	{0x88, 0x78, 0x60}, {0x8D, 0x7C, 0x62}, {0x92, 0x80, 0x64}, {0x97, 0x84, 0x66},
	{0x9C, 0x88, 0x68}, {0xA2, 0x8D, 0x6A}, {0xA8, 0x92, 0x6C}, {0xAE, 0x97, 0x6E}
};

// Random

float random (in vec2 st) 
{
	return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);
}

float randSeed = 0.;
vec2 nextRand2() 
{
	vec2 v = vec2( randSeed++, randSeed++ );
	return vec2( random( v+0.34 ), random( v+0.75 ) );
}

//

// Z' -> 2·Z·Z' + 1
vec2 dmandelbrot(vec2 z, vec2 dz)
{
	return 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);
}

// Z -> Z² + c
vec2 mandelbrot(vec2 z, vec2 c)
{
	return mat2( z, -z.y, z.x ) * z + c;
	//return vec2(pow(z.x,2) - pow(z.y,2), 2 * z.x * z.y) + c;
}

float get_iterations_mandelbrot(out vec2 outz, in vec2 c)
{
	#if 1
	{
		float c2 = dot(c, c);
		// skip computation inside M1 - http://iquilezles.org/www/articles/mset_1bulb/mset1bulb.htm
		if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;
		// skip computation inside M2 - http://iquilezles.org/www/articles/mset_2bulb/mset2bulb.htm
		if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;
	}
	#endif

	//c = 2.5*(c - vec2(.2,0));
	float iterations = 0;
	
	vec2 z = vec2(0);
	while(iterations < iMaxIter) 
	{
		z = mandelbrot(z, c);
		if( dot(z,z) > iThreshold)
			break;
		
		++iterations;
	}
	
	outz = z;
	return iterations;
}

#define OFFSET_COLOR 84
void drawColor( out vec4 fragColor, in vec2 fragCoord ) 
{
	vec2 z = vec2(0);
	vec2 c = iScale * ( 2. * fragCoord - iResolution)/iResolution.y - iPosition;
	float iter = get_iterations_mandelbrot(z, c);
	if (iter != 0 && iter < iMaxIter)
	{
		iter += 1. - log(z.x * z.x + z.y * z.y) / log(iMaxIter);
	}
	else
	{
		iter = 0.;
	}

	float fraction = fract(iter);

	const int it = int(floor(iter)) + OFFSET_COLOR;

	int[3] color1 = PALETTE[it % PALETTE_SIZE];
	int[3] color2 = PALETTE[it % PALETTE_SIZE];

	float r = mix(color1[0]/255.f, color2[0]/255.f, fraction);
	float g = mix(color1[1]/255.f, color2[1]/255.f, fraction);
	float b = mix(color1[2]/255.f, color2[2]/255.f, fraction);

	fragColor = vec4(r, g, b, 1.0f);
}


float get_distance_mandelbrot( in vec2 c )
{
	#if 1
	{
		float c2 = dot(c, c);
		// skip computation inside M1 - http://iquilezles.org/www/articles/mset_1bulb/mset1bulb.htm
		if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;
		// skip computation inside M2 - http://iquilezles.org/www/articles/mset_2bulb/mset2bulb.htm
		if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;
	}
	#endif

	// iterate
	float di =  1.0;
	vec2 z  = vec2(0.0);
	float m2 = 0.0;
	vec2 dz = vec2(0.0);
	for( int i=0; i<iMaxIter; i++ )
	{
		if( m2>iThreshold ) { di=0.0; break; }

		// Z' -> 2·Z·Z' + 1
		dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);
			
		// Z -> Z² + c			
		z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;
			
		m2 = dot(z,z);
	}

	// distance	
	// d(c) = |Z|·log|Z|/|Z'|
	float d = 0.5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));
	if( di>0.5 ) d=0.0;
	
	return d;
}

void drawGray( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 c = iScale * ( 2. * fragCoord - iResolution)/iResolution.y - iPosition;

	float d = get_distance_mandelbrot(c);
	
	d = clamp( pow(4.0*d/iScale,0.2), 0.0, 1.0 );
	
	vec3 col = vec3(d);
	
	fragColor = vec4( col, 1.0 );
}

void main()
{
	if(iColor)
	{
		drawColor(FragColor, gl_FragCoord.xy);
	}
	else
	{
		drawGray(FragColor, gl_FragCoord.xy);
	}
} 
)END";

const GLchar* fractalVertexShader = R"END(
#version 450 core
layout (location = 0) in vec3 aPos; // the position variable has attribute position 0


void main()
{
	gl_Position = vec4(aPos, 1.0); // see how we directly give a vec3 to vec4's constructor
}
)END";